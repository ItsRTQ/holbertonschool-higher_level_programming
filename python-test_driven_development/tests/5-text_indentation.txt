#text_indentation.txt

#Imported module for function usage on test cases
>>> text_indentation = __import__('5-text_indentation').text_indentation

# Test case 1: Basic usage of text_indentation
>>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres")
Lorem ipsum dolor sit amet, consectetur adipiscing elit.
<BLANKLINE>
Quonam modo?
<BLANKLINE>
Utrum igitur tibi litteram videor an totas paginas commovere?
<BLANKLINE>
Non autem hoc:
<BLANKLINE>
igitur ne illud quidem.
<BLANKLINE>
Fortasse id optimum, sed ubi illud:
<BLANKLINE>
Plus semper voluptatis?
<BLANKLINE>
Teneo, inquit, finem illi videri nihil dolere.
<BLANKLINE>
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
<BLANKLINE>
Si id dicis, vicimus.
<BLANKLINE>
Inde sermone vario sex illa a Dipylo stadia confecimus.
<BLANKLINE>
Sin aliud quid voles, postea.
<BLANKLINE>
Quae animi affectio suum cuique tribuens atque hanc, quam dico.
<BLANKLINE>
Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

# Test case 2: multi space at end of .,?
>>> text_indentation("This is.    for.   the, test?        did it work!")
This is.
<BLANKLINE>
for.
<BLANKLINE>
the, test?
<BLANKLINE>
did it work!

# Test case 3: when text is not a string
>>> text_indentation(123)
Traceback (most recent call last):
    ...
TypeError: text must be a string

# Test case 4: when arg is None
>>> text_indentation(None)
Traceback (most recent call last):
    ...
TypeError: text must be a string

# Test case 5: when arg is a list of strings
>>> text_indentation(["text", "is", "list"])
Traceback (most recent call last):
    ...
TypeError: text must be a string

# Test case 6: when arg is tuple of strings
>>> text_indentation(("Text", "in", "tuple"))
Traceback (most recent call last):
    ...
TypeError: text must be a string

# Test case 7: function called with no arguments
>>> text_indentation()
Traceback (most recent call last):
    ...
TypeError: text_indentation() missing 1 required positional argument: 'text'

# Test case 8: args with single world
>>> text_indentation("Hello")
Hello

# Test case 9: arg with multiple-spaces at end
>>> text_indentation("above      readme     : readme? Under    Read me         .")
above      readme     :
<BLANKLINE>
readme?
<BLANKLINE>
Under    Read me         .
<BLANKLINE>

# Test case 10: empty text given
>>> text_indentation("")

# Test case 11: float number given
>>> text_indentation(3.14)
Traceback (most recent call last):
    ...
TypeError: text must be a string

# Test case 12: text with only whitelines
>>> text_indentation("                                                       ")


# Test case 13: text with spaces after .?:
>>> text_indentation("Spaces after special characters. : And here.")
Spaces after special characters.
<BLANKLINE>
:
<BLANKLINE>
And here.
<BLANKLINE>

# Test case 14: text with only special characters
>>> text_indentation("?:.?:.?")
?
<BLANKLINE>
:
<BLANKLINE>
.
<BLANKLINE>
?
<BLANKLINE>
:
<BLANKLINE>
.
<BLANKLINE>
?
<BLANKLINE>

# Test case 15: text with None appended at the start of the text
>>> text_indentation("Hello" + None)
Traceback (most recent call last):
    ...
TypeError: can only concatenate str (not "NoneType") to str

# Test case 16: spaces after every special characters
>>> text_indentation("Hello:   Holberton?    we good.    what happen above")
Hello:
<BLANKLINE>
Holberton?
<BLANKLINE>
we good.
<BLANKLINE>
what happen above

# Test case 17: spaces on every special character before and after
>>> text_indentation("Hello    :     Holberton    ?   we good   .    what happen above")
Hello    :
<BLANKLINE>
Holberton    ?
<BLANKLINE>
we good   .
<BLANKLINE>
what happen above

# Test case 18: text with new lines
>>> text_indentation("William\n\n")
William
<BLANKLINE>

# Test case 19: variable not define
>>> text_indentation(text_here)
Traceback (most recent call last):
    ...
NameError: name 'text_here' is not defined

# Test case 20: text with newlines in it
>>> text_indentation("Printing newline:\nHere.")
Printing newline:
<BLANKLINE>
<BLANKLINE>
Here.
<BLANKLINE>

# Test case 21: ending special character
>>> text_indentation("Any one there?")
Any one there?
<BLANKLINE>

# Test case 22: check for spaces at beginning of lines
>>> text_indentation("       Hello world!.")
Hello world!.
<BLANKLINE>

# Test case 23: check for spaces at end of lines
>>> text_indentation("Hello world!.     ")
Hello world!.
<BLANKLINE>

# Test case 24: white spaces with special characers mix
>>> text_indentation("     YEAH:   this goind to be a trip!.    ")
YEAH:
<BLANKLINE>
this goind to be a trip!.
<BLANKLINE>

# Test case 25: multiple special character at once
>>> text_indentation("As I was saying...")
As I was saying.
<BLANKLINE>
.
<BLANKLINE>
.
<BLANKLINE>

# Text case 26: dictionary as arg
>>> text_indentation({"Name": "William", "Last_name": "Herrera"})
Traceback (most recent call last):
    ...
TypeError: text must be a string