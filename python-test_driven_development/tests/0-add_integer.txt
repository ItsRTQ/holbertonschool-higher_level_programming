#add_integer.txt

# Import the module containing the add_integer function
>>> add_integer = __import__('0-add_integer').add_integer

# Test case 1: Basic Addition
>>> add_integer(1, 2)
3

# Test case 2: Basic Addition with negative value
>>> add_integer(100, -2)
98

# Test case 3: Use of function with 1 arg given
>>> add_integer(2)
100

# Test case 4: Basic Addition with a float value
>>> add_integer(100.3, -2)
98

# Test case 5: Use of function with string value
>>> add_integer(4, "School")
Traceback (most recent call last):
    ...
TypeError: b must be an integer

# Test case 6: Use of function with none value
>>> add_integer(None)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test case 7: Usage of 2 float values
>>> add_integer(2.5, 2.5)
4

# Test case 8: Usage of single string
>>> add_integer("2.5, 2.5")
Traceback (most recent call last):
    ...
TypeError: a must be an integer

# Test case 9: Type casting string as int
>>> add_integer(int("Five5"))
Traceback (most recent call last):
    ...
ValueError: invalid literal for int() with base 10: 'Five5'

# Test case 10: OverflowError test
>>> add_integer(float('inf'))
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer

# Test case 11: Type casting string as float
>>> add_integer(float('Goes Boom'))
Traceback (most recent call last):
    ...
ValueError: could not convert string to float: 'Goes Boom'

# Test case 12: Use the maximum integer value for both a and b
>>> add_integer(2**31 - 1, 2**31 - 1)
4294967294

# Test case 13: Use large float values
>>> add_integer(2.5e20, 1.5e20)
400000000000000000000

# Test case 14: both value Overflow test
>>> add_integer(float('inf'), float('inf'))
Traceback (most recent call last):
    ...
OverflowError: cannot convert float infinity to integer

# Test case 15: function trying to type cast NaN
>>> add_integer(float('nan'))
Traceback (most recent call last):
    ...
ValueError: cannot convert float NaN to integer