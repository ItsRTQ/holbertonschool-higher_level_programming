#print_square.txt

#Import for function print_square to be use on test cases
>>> print_square = __import__('4-print_square').print_square

# Test case 1: basic usage of function
>>> print_square(4)
####
####
####
####

# Test case 2: negative value for size
>>> print_square(-10)
Traceback (most recent call last):
    ...
ValueError: size must be >= 0

# Test case 3: None given as arg for size
>>> print_square(None)
Traceback (most recent call last):
    ...
TypeError: size must be an integer

# Test case 4: float number given
>>> print_square(4.5)
Traceback (most recent call last):
    ...
TypeError: size must be an integer

# Test case 5: list of int given as arg
>>> print_square([1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: size must be an integer

# Test case 6: tuple as arg for size
>>> print_square((0, 1, 2, 3))
Traceback (most recent call last):
    ...
TypeError: size must be an integer

# Test case 7: size of 0
>>> print_square(0)


# Test case 8: infinit float
>>> print_square(float('inf'))
Traceback (most recent call last):
    ...
TypeError: size must be an integer

# Test case 9: float type casted as int
>>> print_square(int(3.14))
###
###
###

# Test case 10: function with no args
>>> print_square()
Traceback (most recent call last):
    ...
TypeError: print_square() missing 1 required positional argument: 'size'

# Test case 11: given a string as arg
>>> print_square("not_a_number")
Traceback (most recent call last):
    ...
TypeError: size must be an integer

# Test case 12: give nan value
>>> print_square(float('nan'))
Traceback (most recent call last):
    ...
TypeError: size must be an integer
